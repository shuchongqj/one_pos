package com.gzdb.basepos.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gzdb.supermarket.been.FinishOrderData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINISH_ORDER_DATA".
*/
public class FinishOrderDataDao extends AbstractDao<FinishOrderData, Long> {

    public static final String TABLENAME = "FINISH_ORDER_DATA";

    /**
     * Properties of entity FinishOrderData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoId = new Property(0, Long.class, "autoId", true, "_id");
        public final static Property PassportId = new Property(1, String.class, "passportId", false, "PASSPORT_ID");
        public final static Property Discount = new Property(2, double.class, "discount", false, "DISCOUNT");
        public final static Property Change = new Property(3, double.class, "change", false, "CHANGE");
        public final static Property SequenceNumber = new Property(4, String.class, "sequenceNumber", false, "SEQUENCE_NUMBER");
        public final static Property ActualPrice = new Property(5, double.class, "actualPrice", false, "ACTUAL_PRICE");
        public final static Property TotalPrice = new Property(6, double.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property DiscountPrice = new Property(7, double.class, "discountPrice", false, "DISCOUNT_PRICE");
        public final static Property MembershipPrice = new Property(8, double.class, "membershipPrice", false, "MEMBERSHIP_PRICE");
        public final static Property RefundStatus = new Property(9, int.class, "refundStatus", false, "REFUND_STATUS");
        public final static Property ReceiptPhone = new Property(10, String.class, "receiptPhone", false, "RECEIPT_PHONE");
        public final static Property Type = new Property(11, int.class, "type", false, "TYPE");
        public final static Property DeliverStatus = new Property(12, int.class, "deliverStatus", false, "DELIVER_STATUS");
        public final static Property PaymentType = new Property(13, String.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property TransType = new Property(14, String.class, "transType", false, "TRANS_TYPE");
        public final static Property CreateTime = new Property(15, long.class, "createTime", false, "CREATE_TIME");
        public final static Property PartnerUserId = new Property(16, String.class, "partnerUserId", false, "PARTNER_USER_ID");
        public final static Property Id = new Property(17, String.class, "id", false, "ID");
        public final static Property PartnerId = new Property(18, String.class, "partnerId", false, "PARTNER_ID");
        public final static Property PaymentTime = new Property(19, long.class, "paymentTime", false, "PAYMENT_TIME");
        public final static Property CancelLogger = new Property(20, String.class, "cancelLogger", false, "CANCEL_LOGGER");
        public final static Property Status = new Property(21, int.class, "status", false, "STATUS");
        public final static Property RewardAmount = new Property(22, String.class, "rewardAmount", false, "REWARD_AMOUNT");
        public final static Property MobilePhone = new Property(23, String.class, "mobilePhone", false, "MOBILE_PHONE");
    }

    private DaoSession daoSession;


    public FinishOrderDataDao(DaoConfig config) {
        super(config);
    }
    
    public FinishOrderDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINISH_ORDER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autoId
                "\"PASSPORT_ID\" TEXT," + // 1: passportId
                "\"DISCOUNT\" REAL NOT NULL ," + // 2: discount
                "\"CHANGE\" REAL NOT NULL ," + // 3: change
                "\"SEQUENCE_NUMBER\" TEXT," + // 4: sequenceNumber
                "\"ACTUAL_PRICE\" REAL NOT NULL ," + // 5: actualPrice
                "\"TOTAL_PRICE\" REAL NOT NULL ," + // 6: totalPrice
                "\"DISCOUNT_PRICE\" REAL NOT NULL ," + // 7: discountPrice
                "\"MEMBERSHIP_PRICE\" REAL NOT NULL ," + // 8: membershipPrice
                "\"REFUND_STATUS\" INTEGER NOT NULL ," + // 9: refundStatus
                "\"RECEIPT_PHONE\" TEXT," + // 10: receiptPhone
                "\"TYPE\" INTEGER NOT NULL ," + // 11: type
                "\"DELIVER_STATUS\" INTEGER NOT NULL ," + // 12: deliverStatus
                "\"PAYMENT_TYPE\" TEXT," + // 13: paymentType
                "\"TRANS_TYPE\" TEXT," + // 14: transType
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 15: createTime
                "\"PARTNER_USER_ID\" TEXT," + // 16: partnerUserId
                "\"ID\" TEXT," + // 17: id
                "\"PARTNER_ID\" TEXT," + // 18: partnerId
                "\"PAYMENT_TIME\" INTEGER NOT NULL ," + // 19: paymentTime
                "\"CANCEL_LOGGER\" TEXT," + // 20: cancelLogger
                "\"STATUS\" INTEGER NOT NULL ," + // 21: status
                "\"REWARD_AMOUNT\" TEXT," + // 22: rewardAmount
                "\"MOBILE_PHONE\" TEXT);"); // 23: mobilePhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINISH_ORDER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FinishOrderData entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
 
        String passportId = entity.getPassportId();
        if (passportId != null) {
            stmt.bindString(2, passportId);
        }
        stmt.bindDouble(3, entity.getDiscount());
        stmt.bindDouble(4, entity.getChange());
 
        String sequenceNumber = entity.getSequenceNumber();
        if (sequenceNumber != null) {
            stmt.bindString(5, sequenceNumber);
        }
        stmt.bindDouble(6, entity.getActualPrice());
        stmt.bindDouble(7, entity.getTotalPrice());
        stmt.bindDouble(8, entity.getDiscountPrice());
        stmt.bindDouble(9, entity.getMembershipPrice());
        stmt.bindLong(10, entity.getRefundStatus());
 
        String receiptPhone = entity.getReceiptPhone();
        if (receiptPhone != null) {
            stmt.bindString(11, receiptPhone);
        }
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getDeliverStatus());
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(14, paymentType);
        }
 
        String transType = entity.getTransType();
        if (transType != null) {
            stmt.bindString(15, transType);
        }
        stmt.bindLong(16, entity.getCreateTime());
 
        String partnerUserId = entity.getPartnerUserId();
        if (partnerUserId != null) {
            stmt.bindString(17, partnerUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(18, id);
        }
 
        String partnerId = entity.getPartnerId();
        if (partnerId != null) {
            stmt.bindString(19, partnerId);
        }
        stmt.bindLong(20, entity.getPaymentTime());
 
        String cancelLogger = entity.getCancelLogger();
        if (cancelLogger != null) {
            stmt.bindString(21, cancelLogger);
        }
        stmt.bindLong(22, entity.getStatus());
 
        String rewardAmount = entity.getRewardAmount();
        if (rewardAmount != null) {
            stmt.bindString(23, rewardAmount);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(24, mobilePhone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FinishOrderData entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
 
        String passportId = entity.getPassportId();
        if (passportId != null) {
            stmt.bindString(2, passportId);
        }
        stmt.bindDouble(3, entity.getDiscount());
        stmt.bindDouble(4, entity.getChange());
 
        String sequenceNumber = entity.getSequenceNumber();
        if (sequenceNumber != null) {
            stmt.bindString(5, sequenceNumber);
        }
        stmt.bindDouble(6, entity.getActualPrice());
        stmt.bindDouble(7, entity.getTotalPrice());
        stmt.bindDouble(8, entity.getDiscountPrice());
        stmt.bindDouble(9, entity.getMembershipPrice());
        stmt.bindLong(10, entity.getRefundStatus());
 
        String receiptPhone = entity.getReceiptPhone();
        if (receiptPhone != null) {
            stmt.bindString(11, receiptPhone);
        }
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getDeliverStatus());
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(14, paymentType);
        }
 
        String transType = entity.getTransType();
        if (transType != null) {
            stmt.bindString(15, transType);
        }
        stmt.bindLong(16, entity.getCreateTime());
 
        String partnerUserId = entity.getPartnerUserId();
        if (partnerUserId != null) {
            stmt.bindString(17, partnerUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(18, id);
        }
 
        String partnerId = entity.getPartnerId();
        if (partnerId != null) {
            stmt.bindString(19, partnerId);
        }
        stmt.bindLong(20, entity.getPaymentTime());
 
        String cancelLogger = entity.getCancelLogger();
        if (cancelLogger != null) {
            stmt.bindString(21, cancelLogger);
        }
        stmt.bindLong(22, entity.getStatus());
 
        String rewardAmount = entity.getRewardAmount();
        if (rewardAmount != null) {
            stmt.bindString(23, rewardAmount);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(24, mobilePhone);
        }
    }

    @Override
    protected final void attachEntity(FinishOrderData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FinishOrderData readEntity(Cursor cursor, int offset) {
        FinishOrderData entity = new FinishOrderData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // passportId
            cursor.getDouble(offset + 2), // discount
            cursor.getDouble(offset + 3), // change
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sequenceNumber
            cursor.getDouble(offset + 5), // actualPrice
            cursor.getDouble(offset + 6), // totalPrice
            cursor.getDouble(offset + 7), // discountPrice
            cursor.getDouble(offset + 8), // membershipPrice
            cursor.getInt(offset + 9), // refundStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // receiptPhone
            cursor.getInt(offset + 11), // type
            cursor.getInt(offset + 12), // deliverStatus
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // paymentType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // transType
            cursor.getLong(offset + 15), // createTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // partnerUserId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // partnerId
            cursor.getLong(offset + 19), // paymentTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cancelLogger
            cursor.getInt(offset + 21), // status
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // rewardAmount
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // mobilePhone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FinishOrderData entity, int offset) {
        entity.setAutoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPassportId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiscount(cursor.getDouble(offset + 2));
        entity.setChange(cursor.getDouble(offset + 3));
        entity.setSequenceNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setActualPrice(cursor.getDouble(offset + 5));
        entity.setTotalPrice(cursor.getDouble(offset + 6));
        entity.setDiscountPrice(cursor.getDouble(offset + 7));
        entity.setMembershipPrice(cursor.getDouble(offset + 8));
        entity.setRefundStatus(cursor.getInt(offset + 9));
        entity.setReceiptPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.getInt(offset + 11));
        entity.setDeliverStatus(cursor.getInt(offset + 12));
        entity.setPaymentType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTransType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreateTime(cursor.getLong(offset + 15));
        entity.setPartnerUserId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPartnerId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPaymentTime(cursor.getLong(offset + 19));
        entity.setCancelLogger(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStatus(cursor.getInt(offset + 21));
        entity.setRewardAmount(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMobilePhone(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FinishOrderData entity, long rowId) {
        entity.setAutoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FinishOrderData entity) {
        if(entity != null) {
            return entity.getAutoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FinishOrderData entity) {
        return entity.getAutoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
