package com.gzdb.basepos.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.gzdb.supermarket.been.ItemSnapshotsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_SNAPSHOTS_BEAN".
*/
public class ItemSnapshotsBeanDao extends AbstractDao<ItemSnapshotsBean, Long> {

    public static final String TABLENAME = "ITEM_SNAPSHOTS_BEAN";

    /**
     * Properties of entity ItemSnapshotsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoId = new Property(0, Long.class, "autoId", true, "_id");
        public final static Property OffLineOrderId = new Property(1, Long.class, "OffLineOrderId", false, "OFF_LINE_ORDER_ID");
        public final static Property LineId = new Property(2, String.class, "lineId", false, "LINE_ID");
        public final static Property ItemUnitName = new Property(3, String.class, "itemUnitName", false, "ITEM_UNIT_NAME");
        public final static Property MarketPrice = new Property(4, double.class, "marketPrice", false, "MARKET_PRICE");
        public final static Property UserMark = new Property(5, String.class, "userMark", false, "USER_MARK");
        public final static Property IntroductionPage = new Property(6, String.class, "introductionPage", false, "INTRODUCTION_PAGE");
        public final static Property OrderId = new Property(7, String.class, "orderId", false, "ORDER_ID");
        public final static Property ItemCode = new Property(8, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ReturnPrice = new Property(9, double.class, "returnPrice", false, "RETURN_PRICE");
        public final static Property ItemBatches = new Property(10, int.class, "itemBatches", false, "ITEM_BATCHES");
        public final static Property NormalPrice = new Property(11, double.class, "normalPrice", false, "NORMAL_PRICE");
        public final static Property ItemUnitId = new Property(12, String.class, "itemUnitId", false, "ITEM_UNIT_ID");
        public final static Property DiscountQuantity = new Property(13, String.class, "discountQuantity", false, "DISCOUNT_QUANTITY");
        public final static Property DiscountPrice = new Property(14, String.class, "discountPrice", false, "DISCOUNT_PRICE");
        public final static Property Id = new Property(15, String.class, "id", false, "ID");
        public final static Property ItemId = new Property(16, String.class, "itemId", false, "ITEM_ID");
        public final static Property ItemTemplateId = new Property(17, String.class, "itemTemplateId", false, "ITEM_TEMPLATE_ID");
        public final static Property ItemName = new Property(18, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ItemTypeId = new Property(19, String.class, "itemTypeId", false, "ITEM_TYPE_ID");
        public final static Property ItemTypeName = new Property(20, String.class, "itemTypeName", false, "ITEM_TYPE_NAME");
        public final static Property ItemTypeUnitId = new Property(21, String.class, "itemTypeUnitId", false, "ITEM_TYPE_UNIT_ID");
        public final static Property ItemTypeUnitName = new Property(22, String.class, "itemTypeUnitName", false, "ITEM_TYPE_UNIT_NAME");
        public final static Property ItemBarcode = new Property(23, String.class, "itemBarcode", false, "ITEM_BARCODE");
        public final static Property CostPrice = new Property(24, double.class, "costPrice", false, "COST_PRICE");
        public final static Property TotalPrice = new Property(25, double.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property NormalQuantity = new Property(26, int.class, "normalQuantity", false, "NORMAL_QUANTITY");
        public final static Property ItemType = new Property(27, int.class, "itemType", false, "ITEM_TYPE");
    }

    private Query<ItemSnapshotsBean> finishOrderData_ItemSnapshotsQuery;

    public ItemSnapshotsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ItemSnapshotsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_SNAPSHOTS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: autoId
                "\"OFF_LINE_ORDER_ID\" INTEGER," + // 1: OffLineOrderId
                "\"LINE_ID\" TEXT," + // 2: lineId
                "\"ITEM_UNIT_NAME\" TEXT," + // 3: itemUnitName
                "\"MARKET_PRICE\" REAL NOT NULL ," + // 4: marketPrice
                "\"USER_MARK\" TEXT," + // 5: userMark
                "\"INTRODUCTION_PAGE\" TEXT," + // 6: introductionPage
                "\"ORDER_ID\" TEXT," + // 7: orderId
                "\"ITEM_CODE\" TEXT," + // 8: itemCode
                "\"RETURN_PRICE\" REAL NOT NULL ," + // 9: returnPrice
                "\"ITEM_BATCHES\" INTEGER NOT NULL ," + // 10: itemBatches
                "\"NORMAL_PRICE\" REAL NOT NULL ," + // 11: normalPrice
                "\"ITEM_UNIT_ID\" TEXT," + // 12: itemUnitId
                "\"DISCOUNT_QUANTITY\" TEXT," + // 13: discountQuantity
                "\"DISCOUNT_PRICE\" TEXT," + // 14: discountPrice
                "\"ID\" TEXT UNIQUE ," + // 15: id
                "\"ITEM_ID\" TEXT," + // 16: itemId
                "\"ITEM_TEMPLATE_ID\" TEXT," + // 17: itemTemplateId
                "\"ITEM_NAME\" TEXT," + // 18: itemName
                "\"ITEM_TYPE_ID\" TEXT," + // 19: itemTypeId
                "\"ITEM_TYPE_NAME\" TEXT," + // 20: itemTypeName
                "\"ITEM_TYPE_UNIT_ID\" TEXT," + // 21: itemTypeUnitId
                "\"ITEM_TYPE_UNIT_NAME\" TEXT," + // 22: itemTypeUnitName
                "\"ITEM_BARCODE\" TEXT," + // 23: itemBarcode
                "\"COST_PRICE\" REAL NOT NULL ," + // 24: costPrice
                "\"TOTAL_PRICE\" REAL NOT NULL ," + // 25: totalPrice
                "\"NORMAL_QUANTITY\" INTEGER NOT NULL ," + // 26: normalQuantity
                "\"ITEM_TYPE\" INTEGER NOT NULL );"); // 27: itemType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_SNAPSHOTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemSnapshotsBean entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
 
        Long OffLineOrderId = entity.getOffLineOrderId();
        if (OffLineOrderId != null) {
            stmt.bindLong(2, OffLineOrderId);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(3, lineId);
        }
 
        String itemUnitName = entity.getItemUnitName();
        if (itemUnitName != null) {
            stmt.bindString(4, itemUnitName);
        }
        stmt.bindDouble(5, entity.getMarketPrice());
 
        String userMark = entity.getUserMark();
        if (userMark != null) {
            stmt.bindString(6, userMark);
        }
 
        String introductionPage = entity.getIntroductionPage();
        if (introductionPage != null) {
            stmt.bindString(7, introductionPage);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(8, orderId);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(9, itemCode);
        }
        stmt.bindDouble(10, entity.getReturnPrice());
        stmt.bindLong(11, entity.getItemBatches());
        stmt.bindDouble(12, entity.getNormalPrice());
 
        String itemUnitId = entity.getItemUnitId();
        if (itemUnitId != null) {
            stmt.bindString(13, itemUnitId);
        }
 
        String discountQuantity = entity.getDiscountQuantity();
        if (discountQuantity != null) {
            stmt.bindString(14, discountQuantity);
        }
 
        String discountPrice = entity.getDiscountPrice();
        if (discountPrice != null) {
            stmt.bindString(15, discountPrice);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(16, id);
        }
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(17, itemId);
        }
 
        String itemTemplateId = entity.getItemTemplateId();
        if (itemTemplateId != null) {
            stmt.bindString(18, itemTemplateId);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(19, itemName);
        }
 
        String itemTypeId = entity.getItemTypeId();
        if (itemTypeId != null) {
            stmt.bindString(20, itemTypeId);
        }
 
        String itemTypeName = entity.getItemTypeName();
        if (itemTypeName != null) {
            stmt.bindString(21, itemTypeName);
        }
 
        String itemTypeUnitId = entity.getItemTypeUnitId();
        if (itemTypeUnitId != null) {
            stmt.bindString(22, itemTypeUnitId);
        }
 
        String itemTypeUnitName = entity.getItemTypeUnitName();
        if (itemTypeUnitName != null) {
            stmt.bindString(23, itemTypeUnitName);
        }
 
        String itemBarcode = entity.getItemBarcode();
        if (itemBarcode != null) {
            stmt.bindString(24, itemBarcode);
        }
        stmt.bindDouble(25, entity.getCostPrice());
        stmt.bindDouble(26, entity.getTotalPrice());
        stmt.bindLong(27, entity.getNormalQuantity());
        stmt.bindLong(28, entity.getItemType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemSnapshotsBean entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
 
        Long OffLineOrderId = entity.getOffLineOrderId();
        if (OffLineOrderId != null) {
            stmt.bindLong(2, OffLineOrderId);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(3, lineId);
        }
 
        String itemUnitName = entity.getItemUnitName();
        if (itemUnitName != null) {
            stmt.bindString(4, itemUnitName);
        }
        stmt.bindDouble(5, entity.getMarketPrice());
 
        String userMark = entity.getUserMark();
        if (userMark != null) {
            stmt.bindString(6, userMark);
        }
 
        String introductionPage = entity.getIntroductionPage();
        if (introductionPage != null) {
            stmt.bindString(7, introductionPage);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(8, orderId);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(9, itemCode);
        }
        stmt.bindDouble(10, entity.getReturnPrice());
        stmt.bindLong(11, entity.getItemBatches());
        stmt.bindDouble(12, entity.getNormalPrice());
 
        String itemUnitId = entity.getItemUnitId();
        if (itemUnitId != null) {
            stmt.bindString(13, itemUnitId);
        }
 
        String discountQuantity = entity.getDiscountQuantity();
        if (discountQuantity != null) {
            stmt.bindString(14, discountQuantity);
        }
 
        String discountPrice = entity.getDiscountPrice();
        if (discountPrice != null) {
            stmt.bindString(15, discountPrice);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(16, id);
        }
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(17, itemId);
        }
 
        String itemTemplateId = entity.getItemTemplateId();
        if (itemTemplateId != null) {
            stmt.bindString(18, itemTemplateId);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(19, itemName);
        }
 
        String itemTypeId = entity.getItemTypeId();
        if (itemTypeId != null) {
            stmt.bindString(20, itemTypeId);
        }
 
        String itemTypeName = entity.getItemTypeName();
        if (itemTypeName != null) {
            stmt.bindString(21, itemTypeName);
        }
 
        String itemTypeUnitId = entity.getItemTypeUnitId();
        if (itemTypeUnitId != null) {
            stmt.bindString(22, itemTypeUnitId);
        }
 
        String itemTypeUnitName = entity.getItemTypeUnitName();
        if (itemTypeUnitName != null) {
            stmt.bindString(23, itemTypeUnitName);
        }
 
        String itemBarcode = entity.getItemBarcode();
        if (itemBarcode != null) {
            stmt.bindString(24, itemBarcode);
        }
        stmt.bindDouble(25, entity.getCostPrice());
        stmt.bindDouble(26, entity.getTotalPrice());
        stmt.bindLong(27, entity.getNormalQuantity());
        stmt.bindLong(28, entity.getItemType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ItemSnapshotsBean readEntity(Cursor cursor, int offset) {
        ItemSnapshotsBean entity = new ItemSnapshotsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // OffLineOrderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lineId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemUnitName
            cursor.getDouble(offset + 4), // marketPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userMark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // introductionPage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orderId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // itemCode
            cursor.getDouble(offset + 9), // returnPrice
            cursor.getInt(offset + 10), // itemBatches
            cursor.getDouble(offset + 11), // normalPrice
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // itemUnitId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // discountQuantity
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // discountPrice
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // id
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // itemId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // itemTemplateId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // itemName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // itemTypeId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // itemTypeName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // itemTypeUnitId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // itemTypeUnitName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // itemBarcode
            cursor.getDouble(offset + 24), // costPrice
            cursor.getDouble(offset + 25), // totalPrice
            cursor.getInt(offset + 26), // normalQuantity
            cursor.getInt(offset + 27) // itemType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemSnapshotsBean entity, int offset) {
        entity.setAutoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOffLineOrderId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLineId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemUnitName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMarketPrice(cursor.getDouble(offset + 4));
        entity.setUserMark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIntroductionPage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItemCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReturnPrice(cursor.getDouble(offset + 9));
        entity.setItemBatches(cursor.getInt(offset + 10));
        entity.setNormalPrice(cursor.getDouble(offset + 11));
        entity.setItemUnitId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDiscountQuantity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDiscountPrice(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setItemId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setItemTemplateId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setItemName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setItemTypeId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setItemTypeName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setItemTypeUnitId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setItemTypeUnitName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setItemBarcode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCostPrice(cursor.getDouble(offset + 24));
        entity.setTotalPrice(cursor.getDouble(offset + 25));
        entity.setNormalQuantity(cursor.getInt(offset + 26));
        entity.setItemType(cursor.getInt(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ItemSnapshotsBean entity, long rowId) {
        entity.setAutoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ItemSnapshotsBean entity) {
        if(entity != null) {
            return entity.getAutoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemSnapshotsBean entity) {
        return entity.getAutoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "itemSnapshots" to-many relationship of FinishOrderData. */
    public List<ItemSnapshotsBean> _queryFinishOrderData_ItemSnapshots(Long OffLineOrderId) {
        synchronized (this) {
            if (finishOrderData_ItemSnapshotsQuery == null) {
                QueryBuilder<ItemSnapshotsBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OffLineOrderId.eq(null));
                finishOrderData_ItemSnapshotsQuery = queryBuilder.build();
            }
        }
        Query<ItemSnapshotsBean> query = finishOrderData_ItemSnapshotsQuery.forCurrentThread();
        query.setParameter(0, OffLineOrderId);
        return query.list();
    }

}
