package com.gzdb.basepos.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gzdb.supermarket.been.GoodBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD_BEAN".
*/
public class GoodBeanDao extends AbstractDao<GoodBean, Long> {

    public static final String TABLENAME = "GOOD_BEAN";

    /**
     * Properties of entity GoodBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoId = new Property(0, Long.class, "autoId", true, "_id");
        public final static Property SortId = new Property(1, int.class, "sortId", false, "SORT_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property ItemName = new Property(3, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ItemType = new Property(4, int.class, "itemType", false, "ITEM_TYPE");
        public final static Property Barcode = new Property(5, String.class, "barcode", false, "BARCODE");
        public final static Property ItemTypeId = new Property(6, String.class, "itemTypeId", false, "ITEM_TYPE_ID");
        public final static Property PosTypeId = new Property(7, String.class, "posTypeId", false, "POS_TYPE_ID");
        public final static Property PosTypeName = new Property(8, String.class, "posTypeName", false, "POS_TYPE_NAME");
        public final static Property ItemUnitId = new Property(9, String.class, "itemUnitId", false, "ITEM_UNIT_ID");
        public final static Property ItemUnitName = new Property(10, String.class, "itemUnitName", false, "ITEM_UNIT_NAME");
        public final static Property ItemTemplateId = new Property(11, String.class, "itemTemplateId", false, "ITEM_TEMPLATE_ID");
        public final static Property ItemImg = new Property(12, String.class, "itemImg", false, "ITEM_IMG");
        public final static Property CreateDate = new Property(13, String.class, "createDate", false, "CREATE_DATE");
        public final static Property BuyCount = new Property(14, int.class, "buyCount", false, "BUY_COUNT");
        public final static Property Description = new Property(15, String.class, "description", false, "DESCRIPTION");
        public final static Property IsShelve = new Property(16, String.class, "isShelve", false, "IS_SHELVE");
        public final static Property IsDelete = new Property(17, String.class, "isDelete", false, "IS_DELETE");
        public final static Property Repertory = new Property(18, int.class, "repertory", false, "REPERTORY");
        public final static Property WarningRepertory = new Property(19, int.class, "warningRepertory", false, "WARNING_REPERTORY");
        public final static Property ShelfLife = new Property(20, int.class, "shelfLife", false, "SHELF_LIFE");
        public final static Property StockPrice = new Property(21, double.class, "stockPrice", false, "STOCK_PRICE");
        public final static Property SalesPrice = new Property(22, double.class, "salesPrice", false, "SALES_PRICE");
        public final static Property GeneratedDate = new Property(23, long.class, "generatedDate", false, "GENERATED_DATE");
        public final static Property ActivityType = new Property(24, int.class, "activityType", false, "ACTIVITY_TYPE");
        public final static Property Price = new Property(25, double.class, "price", false, "PRICE");
        public final static Property Discount = new Property(26, double.class, "discount", false, "DISCOUNT");
        public final static Property ActivityId = new Property(27, int.class, "activityId", false, "ACTIVITY_ID");
        public final static Property State = new Property(28, int.class, "state", false, "STATE");
        public final static Property PromotionPrice = new Property(29, double.class, "promotionPrice", false, "PROMOTION_PRICE");
        public final static Property MembershipPrice = new Property(30, double.class, "membershipPrice", false, "MEMBERSHIP_PRICE");
        public final static Property SellType = new Property(31, String.class, "sellType", false, "SELL_TYPE");
    }


    public GoodBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autoId
                "\"SORT_ID\" INTEGER NOT NULL ," + // 1: sortId
                "\"ID\" TEXT UNIQUE ," + // 2: id
                "\"ITEM_NAME\" TEXT," + // 3: itemName
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 4: itemType
                "\"BARCODE\" TEXT," + // 5: barcode
                "\"ITEM_TYPE_ID\" TEXT," + // 6: itemTypeId
                "\"POS_TYPE_ID\" TEXT," + // 7: posTypeId
                "\"POS_TYPE_NAME\" TEXT," + // 8: posTypeName
                "\"ITEM_UNIT_ID\" TEXT," + // 9: itemUnitId
                "\"ITEM_UNIT_NAME\" TEXT," + // 10: itemUnitName
                "\"ITEM_TEMPLATE_ID\" TEXT," + // 11: itemTemplateId
                "\"ITEM_IMG\" TEXT," + // 12: itemImg
                "\"CREATE_DATE\" TEXT," + // 13: createDate
                "\"BUY_COUNT\" INTEGER NOT NULL ," + // 14: buyCount
                "\"DESCRIPTION\" TEXT," + // 15: description
                "\"IS_SHELVE\" TEXT," + // 16: isShelve
                "\"IS_DELETE\" TEXT," + // 17: isDelete
                "\"REPERTORY\" INTEGER NOT NULL ," + // 18: repertory
                "\"WARNING_REPERTORY\" INTEGER NOT NULL ," + // 19: warningRepertory
                "\"SHELF_LIFE\" INTEGER NOT NULL ," + // 20: shelfLife
                "\"STOCK_PRICE\" REAL NOT NULL ," + // 21: stockPrice
                "\"SALES_PRICE\" REAL NOT NULL ," + // 22: salesPrice
                "\"GENERATED_DATE\" INTEGER NOT NULL ," + // 23: generatedDate
                "\"ACTIVITY_TYPE\" INTEGER NOT NULL ," + // 24: activityType
                "\"PRICE\" REAL NOT NULL ," + // 25: price
                "\"DISCOUNT\" REAL NOT NULL ," + // 26: discount
                "\"ACTIVITY_ID\" INTEGER NOT NULL ," + // 27: activityId
                "\"STATE\" INTEGER NOT NULL ," + // 28: state
                "\"PROMOTION_PRICE\" REAL NOT NULL ," + // 29: promotionPrice
                "\"MEMBERSHIP_PRICE\" REAL NOT NULL ," + // 30: membershipPrice
                "\"SELL_TYPE\" TEXT);"); // 31: sellType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodBean entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
        stmt.bindLong(2, entity.getSortId());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(4, itemName);
        }
        stmt.bindLong(5, entity.getItemType());
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(6, barcode);
        }
 
        String itemTypeId = entity.getItemTypeId();
        if (itemTypeId != null) {
            stmt.bindString(7, itemTypeId);
        }
 
        String posTypeId = entity.getPosTypeId();
        if (posTypeId != null) {
            stmt.bindString(8, posTypeId);
        }
 
        String posTypeName = entity.getPosTypeName();
        if (posTypeName != null) {
            stmt.bindString(9, posTypeName);
        }
 
        String itemUnitId = entity.getItemUnitId();
        if (itemUnitId != null) {
            stmt.bindString(10, itemUnitId);
        }
 
        String itemUnitName = entity.getItemUnitName();
        if (itemUnitName != null) {
            stmt.bindString(11, itemUnitName);
        }
 
        String itemTemplateId = entity.getItemTemplateId();
        if (itemTemplateId != null) {
            stmt.bindString(12, itemTemplateId);
        }
 
        String itemImg = entity.getItemImg();
        if (itemImg != null) {
            stmt.bindString(13, itemImg);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(14, createDate);
        }
        stmt.bindLong(15, entity.getBuyCount());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(16, description);
        }
 
        String isShelve = entity.getIsShelve();
        if (isShelve != null) {
            stmt.bindString(17, isShelve);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(18, isDelete);
        }
        stmt.bindLong(19, entity.getRepertory());
        stmt.bindLong(20, entity.getWarningRepertory());
        stmt.bindLong(21, entity.getShelfLife());
        stmt.bindDouble(22, entity.getStockPrice());
        stmt.bindDouble(23, entity.getSalesPrice());
        stmt.bindLong(24, entity.getGeneratedDate());
        stmt.bindLong(25, entity.getActivityType());
        stmt.bindDouble(26, entity.getPrice());
        stmt.bindDouble(27, entity.getDiscount());
        stmt.bindLong(28, entity.getActivityId());
        stmt.bindLong(29, entity.getState());
        stmt.bindDouble(30, entity.getPromotionPrice());
        stmt.bindDouble(31, entity.getMembershipPrice());
 
        String sellType = entity.getSellType();
        if (sellType != null) {
            stmt.bindString(32, sellType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodBean entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
        stmt.bindLong(2, entity.getSortId());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(4, itemName);
        }
        stmt.bindLong(5, entity.getItemType());
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(6, barcode);
        }
 
        String itemTypeId = entity.getItemTypeId();
        if (itemTypeId != null) {
            stmt.bindString(7, itemTypeId);
        }
 
        String posTypeId = entity.getPosTypeId();
        if (posTypeId != null) {
            stmt.bindString(8, posTypeId);
        }
 
        String posTypeName = entity.getPosTypeName();
        if (posTypeName != null) {
            stmt.bindString(9, posTypeName);
        }
 
        String itemUnitId = entity.getItemUnitId();
        if (itemUnitId != null) {
            stmt.bindString(10, itemUnitId);
        }
 
        String itemUnitName = entity.getItemUnitName();
        if (itemUnitName != null) {
            stmt.bindString(11, itemUnitName);
        }
 
        String itemTemplateId = entity.getItemTemplateId();
        if (itemTemplateId != null) {
            stmt.bindString(12, itemTemplateId);
        }
 
        String itemImg = entity.getItemImg();
        if (itemImg != null) {
            stmt.bindString(13, itemImg);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(14, createDate);
        }
        stmt.bindLong(15, entity.getBuyCount());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(16, description);
        }
 
        String isShelve = entity.getIsShelve();
        if (isShelve != null) {
            stmt.bindString(17, isShelve);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(18, isDelete);
        }
        stmt.bindLong(19, entity.getRepertory());
        stmt.bindLong(20, entity.getWarningRepertory());
        stmt.bindLong(21, entity.getShelfLife());
        stmt.bindDouble(22, entity.getStockPrice());
        stmt.bindDouble(23, entity.getSalesPrice());
        stmt.bindLong(24, entity.getGeneratedDate());
        stmt.bindLong(25, entity.getActivityType());
        stmt.bindDouble(26, entity.getPrice());
        stmt.bindDouble(27, entity.getDiscount());
        stmt.bindLong(28, entity.getActivityId());
        stmt.bindLong(29, entity.getState());
        stmt.bindDouble(30, entity.getPromotionPrice());
        stmt.bindDouble(31, entity.getMembershipPrice());
 
        String sellType = entity.getSellType();
        if (sellType != null) {
            stmt.bindString(32, sellType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodBean readEntity(Cursor cursor, int offset) {
        GoodBean entity = new GoodBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoId
            cursor.getInt(offset + 1), // sortId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemName
            cursor.getInt(offset + 4), // itemType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // barcode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // itemTypeId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // posTypeId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // posTypeName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // itemUnitId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // itemUnitName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // itemTemplateId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // itemImg
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createDate
            cursor.getInt(offset + 14), // buyCount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // description
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // isShelve
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // isDelete
            cursor.getInt(offset + 18), // repertory
            cursor.getInt(offset + 19), // warningRepertory
            cursor.getInt(offset + 20), // shelfLife
            cursor.getDouble(offset + 21), // stockPrice
            cursor.getDouble(offset + 22), // salesPrice
            cursor.getLong(offset + 23), // generatedDate
            cursor.getInt(offset + 24), // activityType
            cursor.getDouble(offset + 25), // price
            cursor.getDouble(offset + 26), // discount
            cursor.getInt(offset + 27), // activityId
            cursor.getInt(offset + 28), // state
            cursor.getDouble(offset + 29), // promotionPrice
            cursor.getDouble(offset + 30), // membershipPrice
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // sellType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodBean entity, int offset) {
        entity.setAutoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSortId(cursor.getInt(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemType(cursor.getInt(offset + 4));
        entity.setBarcode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItemTypeId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPosTypeId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setItemUnitId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setItemUnitName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setItemTemplateId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setItemImg(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBuyCount(cursor.getInt(offset + 14));
        entity.setDescription(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsShelve(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsDelete(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRepertory(cursor.getInt(offset + 18));
        entity.setWarningRepertory(cursor.getInt(offset + 19));
        entity.setShelfLife(cursor.getInt(offset + 20));
        entity.setStockPrice(cursor.getDouble(offset + 21));
        entity.setSalesPrice(cursor.getDouble(offset + 22));
        entity.setGeneratedDate(cursor.getLong(offset + 23));
        entity.setActivityType(cursor.getInt(offset + 24));
        entity.setPrice(cursor.getDouble(offset + 25));
        entity.setDiscount(cursor.getDouble(offset + 26));
        entity.setActivityId(cursor.getInt(offset + 27));
        entity.setState(cursor.getInt(offset + 28));
        entity.setPromotionPrice(cursor.getDouble(offset + 29));
        entity.setMembershipPrice(cursor.getDouble(offset + 30));
        entity.setSellType(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodBean entity, long rowId) {
        entity.setAutoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodBean entity) {
        if(entity != null) {
            return entity.getAutoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodBean entity) {
        return entity.getAutoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
