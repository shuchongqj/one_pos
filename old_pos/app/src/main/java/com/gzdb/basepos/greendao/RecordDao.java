package com.gzdb.basepos.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gzdb.vaservice.bean.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Order_id = new Property(1, String.class, "order_id", false, "ORDER_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Head = new Property(3, String.class, "head", false, "HEAD");
        public final static Property Shid = new Property(4, String.class, "shid", false, "SHID");
        public final static Property Serial_no = new Property(5, String.class, "serial_no", false, "SERIAL_NO");
        public final static Property Pki_no = new Property(6, String.class, "pki_no", false, "PKI_NO");
        public final static Property Sys_order_no = new Property(7, String.class, "sys_order_no", false, "SYS_ORDER_NO");
        public final static Property Physics_no = new Property(8, String.class, "physics_no", false, "PHYSICS_NO");
        public final static Property Logic_no = new Property(9, String.class, "logic_no", false, "LOGIC_NO");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property Auth_code = new Property(11, String.class, "auth_code", false, "AUTH_CODE");
        public final static Property Card_back_no = new Property(12, String.class, "card_back_no", false, "CARD_BACK_NO");
        public final static Property Reader_back_no = new Property(13, String.class, "reader_back_no", false, "READER_BACK_NO");
        public final static Property Voucher_no = new Property(14, String.class, "voucher_no", false, "VOUCHER_NO");
        public final static Property Money = new Property(15, String.class, "money", false, "MONEY");
        public final static Property Balance = new Property(16, String.class, "balance", false, "BALANCE");
        public final static Property Money_lower = new Property(17, String.class, "money_lower", false, "MONEY_LOWER");
        public final static Property Money_upper = new Property(18, String.class, "money_upper", false, "MONEY_UPPER");
        public final static Property Card_info = new Property(19, String.class, "card_info", false, "CARD_INFO");
        public final static Property Rfu = new Property(20, String.class, "rfu", false, "RFU");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: order_id
                "\"TYPE\" TEXT," + // 2: type
                "\"HEAD\" TEXT," + // 3: head
                "\"SHID\" TEXT," + // 4: shid
                "\"SERIAL_NO\" TEXT," + // 5: serial_no
                "\"PKI_NO\" TEXT," + // 6: pki_no
                "\"SYS_ORDER_NO\" TEXT," + // 7: sys_order_no
                "\"PHYSICS_NO\" TEXT," + // 8: physics_no
                "\"LOGIC_NO\" TEXT," + // 9: logic_no
                "\"STATUS\" TEXT," + // 10: status
                "\"AUTH_CODE\" TEXT," + // 11: auth_code
                "\"CARD_BACK_NO\" TEXT," + // 12: card_back_no
                "\"READER_BACK_NO\" TEXT," + // 13: reader_back_no
                "\"VOUCHER_NO\" TEXT," + // 14: voucher_no
                "\"MONEY\" TEXT," + // 15: money
                "\"BALANCE\" TEXT," + // 16: balance
                "\"MONEY_LOWER\" TEXT," + // 17: money_lower
                "\"MONEY_UPPER\" TEXT," + // 18: money_upper
                "\"CARD_INFO\" TEXT," + // 19: card_info
                "\"RFU\" TEXT);"); // 20: rfu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(4, head);
        }
 
        String shid = entity.getShid();
        if (shid != null) {
            stmt.bindString(5, shid);
        }
 
        String serial_no = entity.getSerial_no();
        if (serial_no != null) {
            stmt.bindString(6, serial_no);
        }
 
        String pki_no = entity.getPki_no();
        if (pki_no != null) {
            stmt.bindString(7, pki_no);
        }
 
        String sys_order_no = entity.getSys_order_no();
        if (sys_order_no != null) {
            stmt.bindString(8, sys_order_no);
        }
 
        String physics_no = entity.getPhysics_no();
        if (physics_no != null) {
            stmt.bindString(9, physics_no);
        }
 
        String logic_no = entity.getLogic_no();
        if (logic_no != null) {
            stmt.bindString(10, logic_no);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String auth_code = entity.getAuth_code();
        if (auth_code != null) {
            stmt.bindString(12, auth_code);
        }
 
        String card_back_no = entity.getCard_back_no();
        if (card_back_no != null) {
            stmt.bindString(13, card_back_no);
        }
 
        String reader_back_no = entity.getReader_back_no();
        if (reader_back_no != null) {
            stmt.bindString(14, reader_back_no);
        }
 
        String voucher_no = entity.getVoucher_no();
        if (voucher_no != null) {
            stmt.bindString(15, voucher_no);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(16, money);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(17, balance);
        }
 
        String money_lower = entity.getMoney_lower();
        if (money_lower != null) {
            stmt.bindString(18, money_lower);
        }
 
        String money_upper = entity.getMoney_upper();
        if (money_upper != null) {
            stmt.bindString(19, money_upper);
        }
 
        String card_info = entity.getCard_info();
        if (card_info != null) {
            stmt.bindString(20, card_info);
        }
 
        String rfu = entity.getRfu();
        if (rfu != null) {
            stmt.bindString(21, rfu);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(2, order_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(4, head);
        }
 
        String shid = entity.getShid();
        if (shid != null) {
            stmt.bindString(5, shid);
        }
 
        String serial_no = entity.getSerial_no();
        if (serial_no != null) {
            stmt.bindString(6, serial_no);
        }
 
        String pki_no = entity.getPki_no();
        if (pki_no != null) {
            stmt.bindString(7, pki_no);
        }
 
        String sys_order_no = entity.getSys_order_no();
        if (sys_order_no != null) {
            stmt.bindString(8, sys_order_no);
        }
 
        String physics_no = entity.getPhysics_no();
        if (physics_no != null) {
            stmt.bindString(9, physics_no);
        }
 
        String logic_no = entity.getLogic_no();
        if (logic_no != null) {
            stmt.bindString(10, logic_no);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String auth_code = entity.getAuth_code();
        if (auth_code != null) {
            stmt.bindString(12, auth_code);
        }
 
        String card_back_no = entity.getCard_back_no();
        if (card_back_no != null) {
            stmt.bindString(13, card_back_no);
        }
 
        String reader_back_no = entity.getReader_back_no();
        if (reader_back_no != null) {
            stmt.bindString(14, reader_back_no);
        }
 
        String voucher_no = entity.getVoucher_no();
        if (voucher_no != null) {
            stmt.bindString(15, voucher_no);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(16, money);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(17, balance);
        }
 
        String money_lower = entity.getMoney_lower();
        if (money_lower != null) {
            stmt.bindString(18, money_lower);
        }
 
        String money_upper = entity.getMoney_upper();
        if (money_upper != null) {
            stmt.bindString(19, money_upper);
        }
 
        String card_info = entity.getCard_info();
        if (card_info != null) {
            stmt.bindString(20, card_info);
        }
 
        String rfu = entity.getRfu();
        if (rfu != null) {
            stmt.bindString(21, rfu);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // order_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // head
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // serial_no
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pki_no
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sys_order_no
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // physics_no
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // logic_no
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // auth_code
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // card_back_no
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // reader_back_no
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // voucher_no
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // money
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // balance
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // money_lower
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // money_upper
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // card_info
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // rfu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setOrder_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSerial_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPki_no(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSys_order_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhysics_no(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLogic_no(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAuth_code(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCard_back_no(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReader_back_no(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVoucher_no(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMoney(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBalance(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMoney_lower(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMoney_upper(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCard_info(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRfu(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
