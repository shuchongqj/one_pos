package com.one.pos.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.one.pos.db.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM".
*/
public class ItemDao extends AbstractDao<Item, Void> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property TemplateId = new Property(1, long.class, "templateId", false, "TEMPLATE_ID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property VipPrice = new Property(4, String.class, "vipPrice", false, "VIP_PRICE");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Storage = new Property(6, String.class, "storage", false, "STORAGE");
        public final static Property Stock = new Property(7, int.class, "stock", false, "STOCK");
    }


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"TEMPLATE_ID\" INTEGER NOT NULL ," + // 1: templateId
                "\"CODE\" TEXT," + // 2: code
                "\"NAME\" TEXT," + // 3: name
                "\"VIP_PRICE\" TEXT," + // 4: vipPrice
                "\"PRICE\" TEXT," + // 5: price
                "\"STORAGE\" TEXT," + // 6: storage
                "\"STOCK\" INTEGER NOT NULL );"); // 7: stock
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Item entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTemplateId());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String vipPrice = entity.getVipPrice();
        if (vipPrice != null) {
            stmt.bindString(5, vipPrice);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String storage = entity.getStorage();
        if (storage != null) {
            stmt.bindString(7, storage);
        }
        stmt.bindLong(8, entity.getStock());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTemplateId());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String vipPrice = entity.getVipPrice();
        if (vipPrice != null) {
            stmt.bindString(5, vipPrice);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String storage = entity.getStorage();
        if (storage != null) {
            stmt.bindString(7, storage);
        }
        stmt.bindLong(8, entity.getStock());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // templateId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vipPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // storage
            cursor.getInt(offset + 7) // stock
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTemplateId(cursor.getLong(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVipPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStorage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStock(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Item entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Item entity) {
        return null;
    }

    @Override
    public boolean hasKey(Item entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
